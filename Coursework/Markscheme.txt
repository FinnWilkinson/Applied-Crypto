-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [35] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources is allowed *iff.* it

- hasn't been explicitly prohibited by the assignment description, *and*
- is correctly cited.

Let us know any third-party source code or resources you used (if any) so
it's clear what's your work and what isn't:

[
  - OpenSSl/aes.h used in attack.c in order to verify the key guess against the plaintexts and
    ciphertexts read in from the traces data file after guess has been comleted
]

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious aspect (e.g., functional correctness); other aspects
outside this list can warrant an increase/decrease in marks, with examples
including hard to quantify features such as style, efficiency, robustness,
generality, or realism of a solution.  Put another way, identifying then
reasoning about these latter aspects forms part of the assessment, so they
are not (necessarily) detailed explicitly.

[X] Stage 1 : an attack target  implementation                       ( 30%)

    Stage 2 : an attack         implementation
[X]           - an   assisted (or   dependent) solution              ( 30%)
                *OR*
[?]           - an unassisted (or independent) solution              ( 40%)

    Stage 3 : a  countermeasure implementation
              - selection and implementation                         ( 15%)
              - security evaluation                                  ( 15%)

                                                                     ------
                                                                     (100%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

[
  - upon opening a new terinal, the AppliedCryptoSetUp.sh file was executed in the home directory using the following command 
    in order to set up the environment for execution on the SCALE board emulator:
		source AppliedCryptoSetUp.sh

  - target.c was built using the following command:
		make build-target
  - target was then executed on the SCALE emulator using the following command:
		make emulate-target
	
  - interaction with target emulation is performed using the following terminal command:
		make putty-emulator

  - attack.c was built using the following compile command in the terminal:
		gcc -std=c99 -Wall -Ofast -lcrypto attack.c -o attack

  - attack is then executed (to perform attack on provided trace data trace.dat) using the following command in terinal:
		./attack traces.dat

  - Stage 3 : security evaluation and reasoning about how it could work can be found in SecurityEvaluation.txt

]

-------------------------------------------------------------------------------
